From 9449526ed9ad8532f36cde7a77b6a4e5e1fa4244 Mon Sep 17 00:00:00 2001
From: Yaroslav Halchenko <debian@onerussian.com>
Date: Fri, 23 Jul 2021 10:49:09 -0400
Subject: [PATCH] RF(TST): do not test for no EASY and pkg_resources in shims

Awhile back we did switch away from creating our own entry point
scripts, and just succumbed to all the goodness default mechanisms
give us.  We had to skip this test on debian builds, where we have
to run something like   setup.py develop  to produce those entry points
for the tests.  That added up burden etc.  So I decided we should no
longer bother with such tests, also because pkg_resources now used
just as a fall back in those produced by setuptools, so typically there
should be no big penalty in start time.

Closes #5384
---
 datalad/cmdline/tests/test_main.py | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/datalad/cmdline/tests/test_main.py b/datalad/cmdline/tests/test_main.py
index d72aee5e2..668cfa307 100644
--- a/datalad/cmdline/tests/test_main.py
+++ b/datalad/cmdline/tests/test_main.py
@@ -189,12 +189,6 @@ def test_incorrect_options():
 
 def test_script_shims():
     runner = Runner()
-    # The EASY-INSTALL checks below aren't valid for editable installs. Use the
-    # existence of setup.py as an indication that install is _probably_
-    # editable. The file should always exist for editable installs, but it can
-    # also exist for non-editable installs when the tests are being executed
-    # from the top of the source tree.
-    setup_exists = (Path(datalad.__file__).parent.parent / "setup.py").exists()
     for script in [
         'datalad',
         'git-annex-remote-datalad-archives',
@@ -209,10 +203,6 @@ def test_script_shims():
             from distutils.spawn import find_executable
             content = find_executable(script)
 
-        if not setup_exists:
-            assert_not_in('EASY', content) # NOTHING easy should be there
-            assert_not_in('pkg_resources', content)
-
         # and let's check that it is our script
         out = runner.run([script, '--version'], protocol=StdOutErrCapture)
         version = (out['stdout'] + out['stderr']).splitlines()[0].split(' ', 1)[1]
-- 
2.32.0

